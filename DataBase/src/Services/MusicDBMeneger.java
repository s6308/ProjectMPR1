package Services;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import Base.Music;

public class MusicDBMeneger {
	
	private Connection conn;
	private Statement CreateTabele;
	private PreparedStatement AddMusicStmt;
	private PreparedStatement GetMusicStmt;
	private PreparedStatement FindeMusicByTitleStmt;
	private PreparedStatement RemoveMusicStmt;
	private PreparedStatement RemoveAllMusicStmt; 


	public MusicDBMeneger(){

		try {
		conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
		CreateTabele = conn.createStatement();
		ResultSet resul = conn.getMetaData().getTables(null, null, null, null);
		boolean MusicTableExists=false;
		while(resul.next())
		{
		if("Music".equalsIgnoreCase(resul.getString("Table_Name")))
		{
		MusicTableExists=true;
		break;
		}
		}
		if(!MusicTableExists)
		{
		CreateTabele.executeUpdate("" +
		"CREATE TABLE Music(" +
		"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
		"" +"author varchar (50)," +
		"" +"title varchar (50)," +
		"" +"id_client integer," +
		"Constraint client_fk foreign key (id_client) references Clients(id)" +
		")");
		}
		AddMusicStmt = conn.prepareStatement("" +"INSERT INTO Music (Author, Title, id_client) VALUES (?,?,?)" +"");
		GetMusicStmt = conn.prepareStatement("" +"SELECT * FROM Music " +"");
		FindeMusicByTitleStmt = conn.prepareStatement("SELECT * FROM Music WHERE Title= ?");
		RemoveMusicStmt = conn.prepareStatement("DELETE FROM Music WHERE ID = ?");
		RemoveAllMusicStmt = conn.prepareStatement("DELETE FROM Music");

		} catch (SQLException e) {

		e.printStackTrace();
		}
	}
	
	public List<Integer> FindeMusicByTitle (String title) {
		try {
		List<Integer> finded = new ArrayList<Integer>();
		FindeMusicByTitleStmt.setString(1, title);
		ResultSet resul = FindeMusicByTitleStmt.executeQuery();
		while (resul.next())
			finded.add(resul.getInt("ID"));
		return finded;
		} catch (SQLException e) {
		e.printStackTrace();
		}
		return null;
	}

	public void AddMusic (Music M, List<Integer> client){
		try {

			AddMusicStmt.setString(1, M.getAuthor());
			AddMusicStmt.setString(2, M.getTitle());
		for (Integer Id : client){
			AddMusicStmt.setInt(3, Id);
		}
		AddMusicStmt.executeUpdate();

		} catch (SQLException e) {

		e.printStackTrace();
		}
	}
	
	public List<Music> GetMusic (){
		List<Music> musics =new ArrayList<Music>();

		try {
		ResultSet resul = GetMusicStmt.executeQuery();

		while(resul.next())
		{
		musics.add(new Music(resul.getString("Author"), resul.getString("Title")));
		}

		} catch (SQLException e) {

		e.printStackTrace();
		}

		return musics;
	}

	public void RemoveMusic(List<Integer> musics) {
		try {
		for (Integer id : musics) {

			RemoveMusicStmt.setInt(1, id);
			RemoveMusicStmt.executeUpdate();
			}
		} 
		catch (SQLException e) {
		e.printStackTrace();
		}
	}
	public void RemoveAllMusic() {
		try {
			RemoveAllMusicStmt.executeUpdate();
		}
		catch (SQLException e)
		{
		e.printStackTrace();
		}
	}

}
