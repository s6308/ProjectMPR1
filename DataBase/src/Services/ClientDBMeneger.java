package Services;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import Base.Client;

public class ClientDBMeneger {
	
	private Connection conn;
	private Statement CreateTabele;
	private PreparedStatement AddClientStmt;
	private PreparedStatement GetClientsStmt;
	private PreparedStatement FindClientStmt;
	private PreparedStatement RemoveClientStmt;
	private PreparedStatement RemoveAllClientswStmt;


    public ClientDBMeneger() {


	  try {
		  conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
		  CreateTabele = conn.createStatement();
		  ResultSet resul =conn.getMetaData().getTables(null, null, null, null);
		  boolean ClientsTableExists=false;
		  while(resul.next())
		  {
		  if("Clients".equalsIgnoreCase(resul.getString("Table_Name")))
		  {
			ClientsTableExists=true;
		  break;
		  }
		  }
		  if(!ClientsTableExists)
		  {
		  CreateTabele.executeUpdate("" +
		  "CREATE TABLE Clients(" +
		  "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
		  "name varchar(25),"+
		  "" +"surname varchar (50)," + 
		  "" +"phone Integer," +
		  "" +"mobile Integer" +
		  ")");
		  }

		  AddClientStmt = conn.prepareStatement("INSERT INTO Clients (name, surname, phone, mobile) VALUES (?, ?, ?, ?)");
		  GetClientsStmt = conn.prepareStatement("SELECT * FROM Clients");
		  FindClientStmt = conn.prepareStatement("SELECT * FROM Clients WHERE surname = ?");       
		  RemoveClientStmt = conn.prepareStatement("DELETE FROM Clients WHERE ID = ?");
		  RemoveAllClientswStmt = conn.prepareStatement("DELETE FROM Clients");
        
		  } catch (SQLException e) {

		  e.printStackTrace();
		  }
		  }

  public void AddClient (Client c) {
	  try
	  {
		  AddClientStmt.setString(1, c.getName());
		  AddClientStmt.setString(2, c.getSurname());
		  AddClientStmt.setInt(3, c.getPhone());
		  AddClientStmt.setInt(4, c.getMobile());
		  AddClientStmt.executeUpdate();
	  }
	  catch (SQLException e)
	  	{

	  e.printStackTrace();
	  	}

	  }
  
  public List<Client> GetClients(){
	  List<Client> clients =new ArrayList<Client>();

	  try {
	  ResultSet result = GetClientsStmt.executeQuery();

	  while(result.next())
	  	{
	  clients.add(new Client(result.getString("name"), result.getString("surname"), result.getInt("phone"), result.getInt("mobile")));
	  	}
	  } 

	  catch (SQLException e) {

	  e.printStackTrace();
	  }

	  return clients;
	  }
  
  public List<Integer> FindClient (String surname) {
	  try {
	  List<Integer> finded = new ArrayList<Integer>();
	  FindClientStmt.setString(1, surname);
	  ResultSet result = FindClientStmt.executeQuery();
	  while (result.next())
		  finded.add(result.getInt("ID"));
	  return finded;
	  	} 
	  catch (SQLException e) {
	  e.printStackTrace();
	  	}
	  return null;
	  }
  
  public void RemoveClient(List<Integer> clients) {
	  try {
	  for (Integer id : clients) {
		  RemoveClientStmt.setInt(1, id);
		  RemoveClientStmt.executeUpdate();
	  	}
	  } 
	  catch (SQLException e) {
	  e.printStackTrace();
	  	}
	  }
  public void RemoveAllClients() {
	  try {
		  RemoveAllClientswStmt.executeUpdate();
	  	}
	  catch (SQLException e)
	  	{
	  e.printStackTrace();
	  }
	}

}
